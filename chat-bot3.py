import datetime
import os
import random
import re
import webbrowser
from urllib.parse import quote
import requests
import spacy
from textblob import TextBlob
from googletrans import Translator


# –ó–∞–≥—Ä—É–∑–∫–∞ spaCy –º–æ–¥–µ–ª–∏ –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
try:
    nlp = spacy.load("ru_core_news_sm")
except OSError:
    print("–ú–æ–¥–µ–ª—å ru_core_news_sm –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ó–∞–≥—Ä—É–∂–∞—é...")
    import spacy.cli

    spacy.cli.download("ru_core_news_sm")
    nlp = spacy.load("ru_core_news_sm")

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–æ–≤–∞—Ä—å —à–∞–±–ª–æ–Ω–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤
responses = {
    r"–∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç\??": ["–Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫!", "–ú–µ–Ω—è –∑–æ–≤—É—Ç –ë–æ—Ç.", "–Ø - –≤–∞—à –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç."],
    r"–∫–∞–∫ –¥–µ–ª–∞\??": ["–°–ø–∞—Å–∏–±–æ, —É –º–µ–Ω—è –≤—Å—ë —Ö–æ—Ä–æ—à–æ!",
                     "–ù–µ–ø–ª–æ—Ö–æ, –∞ —É —Ç–µ–±—è?",
                     "–Ø –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≥—Ä–∞–º–º–∞, –Ω–æ —á—É–≤—Å—Ç–≤—É—é —Å–µ–±—è –æ—Ç–ª–∏—á–Ω–æ!"],
    r"—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å\??": ["–Ø —É–º–µ—é –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –∏—Å–∫–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∫–æ–º–∞–Ω–¥—ã!",
                          "–ú–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã, –Ω–æ —è –º–æ–≥—É –ø–æ–º–æ—á—å —Å –ø—Ä–æ—Å—Ç—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏.",
                          "–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –∏–ª–∏ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ."],
    r"—Å–∫–æ–ª—å–∫–æ —Å–µ–π—á–∞—Å –≤—Ä–µ–º—è\??": lambda: datetime.datetime.now().strftime("–°–µ–π—á–∞—Å –≤—Ä–µ–º—è %H:%M:%S"),
    r"–∫–∞–∫–æ–µ —Å–µ–≥–æ–¥–Ω—è —á–∏—Å–ª–æ\??": lambda: datetime.date.today().strftime("–°–µ–≥–æ–¥–Ω—è %d.%m.%Y"),
    r"—Ä–∞—Å—Å–∫–∞–∂–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç": ["–û –∫–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å —Ñ–∞–∫—Ç? (—Å–ø–æ—Ä—Ç, –∏—Å—Ç–æ—Ä–∏—è, –∫–æ—Å–º–æ—Å)",
                                  "–Ø –º–æ–≥—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å —Ñ–∞–∫—Ç –æ —Å–ø–æ—Ä—Ç–µ, –∏—Å—Ç–æ—Ä–∏–∏ –∏–ª–∏ –∫–æ—Å–º–æ—Å–µ. –ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?"],
    r"–µ—â–µ –æ–¥–∏–Ω —Ñ–∞–∫—Ç": ["–û –∫–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å —Ñ–∞–∫—Ç? (—Å–ø–æ—Ä—Ç, –∏—Å—Ç–æ—Ä–∏—è, –∫–æ—Å–º–æ—Å)",
                       "–ò–∑ –∫–∞–∫–æ–π –æ–±–ª–∞—Å—Ç–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –Ω–æ–≤—ã–π —Ñ–∞–∫—Ç?"],
    r"–ø–æ–∏—Å–∫\s(.+)": ["–ò—â—É –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ...", "–ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ –≤ Google...", "–°–µ–π—á–∞—Å –Ω–∞–π–¥—É —ç—Ç–æ –≤ —Å–µ—Ç–∏..."],
    r"–ø–æ–≥–æ–¥–∞ –≤ (.+)": ["–ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ...", "–ó–∞–ø—Ä–∞—à–∏–≤–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ...", "–°–µ–π—á–∞—Å —É–∑–Ω–∞–µ–º –ø–æ–≥–æ–¥—É..."],
    r"\b–ø—Ä–∏–≤–µ—Ç\b": [
        "–ü—Ä–∏–≤–µ—Ç-–ø—Ä–∏–≤–µ—Ç! üòä –ö–∞–∫ —Ç–≤–æ–∏ –¥–µ–ª–∞?",
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å —Å–µ–≥–æ–¥–Ω—è?",
        "–ô–æ! –†–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å!",
    ],
    r"\b–Ω–∞—Å—Ç–æ—è—â–∏–π\b|\b–∂–∏–≤–æ–π\b|\b—á–µ–ª–æ–≤–µ–∫\b": [
        "–Ø –ø–æ–∫–∞ –Ω–µ —á–µ–ª–æ–≤–µ–∫... –Ω–æ —É–∂–µ —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–æ–º! üòè",
        "–ü–æ—á—Ç–∏! –¢–æ–ª—å–∫–æ –Ω–µ –ø—å—é —á–∞–π –∏ –Ω–µ —Ö–æ–∂—É –≤ –º–∞–≥–∞–∑–∏–Ω üòÑ",
    ],
    r"\b—Å–ø–∞—Å–∏–±–æ\b|\b–±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç—å\b": [
        "–†–∞–¥ –ø–æ–º–æ—á—å! –û–±—Ä–∞—â–∞–π—Å—è –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è üòä",
        "–í—Å–µ–≥–¥–∞ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞! –ß–µ–º –µ—â—ë –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω?",
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞!",
    ],
    r"\b–ø–æ–∫–∞\b|\b—Å–≤–∏–¥–∞–Ω–∏–µ\b": [
        "–î–æ –≤—Å—Ç—Ä–µ—á–∏! –ù–∞–¥–µ—é—Å—å, —Å–∫–æ—Ä–æ —Å–Ω–æ–≤–∞ –ø–æ–±–æ–ª—Ç–∞–µ–º üëã",
        "–ü–æ–∫–∞! –ë–µ—Ä–µ–≥–∏ —Å–µ–±—è!",
    ],
    r"\b–¥–µ–ª–æ\b|\b–Ω–æ–≤—ã–π\b": [
        "–í—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ, —Å–ø–∞—Å–∏–±–æ, —á—Ç–æ —Å–ø—Ä–æ—Å–∏–ª!",
        "–ß—É–¥–µ—Å–Ω–æ!",
    ],
    r"\b—É–º–µ—Ç—å\b": [
        "–Ø —É–º–µ—é –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, —Å—á–∏—Ç–∞—Ç—å –Ω–µ—Å–ª–æ–∂–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è. –ú–æ–≥—É –Ω–∞–π—Ç–∏ –≤—Å—ë, —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ!",
    ],

    r"\b–≤—Ä–µ–º—è\b|\b—á–∞—Å\b": lambda _: datetime.datetime.now().strftime("–°–µ–π—á–∞—Å %H:%M."),
    r"\b—á–∏—Å–ª–æ\b|\b–¥–∞—Ç–∞\b": lambda _: datetime.date.today().strftime("–°–µ–≥–æ–¥–Ω—è %d.%m.%Y"),
    r"\b–Ω–∞–π–¥–∏\b\s+(.+)": lambda m: search_web(m.group(1)),
}

# –°–ª–æ–≤–∞—Ä—å —Ñ–∞–∫—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
facts = {
    "—Å–ø–æ—Ä—Ç": [
        "–ë–∞–¥–º–∏–Ω—Ç–æ–Ω ‚Äì —è–≤–ª—è–µ—Ç—Å—è —Å–∞–º—ã–º –±—ã—Å—Ç—Ä—ã–º —Ä–∞–∫–µ—Ç–æ—á–Ω—ã–º –≤–∏–¥–æ–º —Å–ø–æ—Ä—Ç–∞: —Å–∫–æ—Ä–æ—Å—Ç—å –ø–æ–ª–µ—Ç–∞ –≤–æ–ª–∞–Ω–∞ –º–æ–∂–µ—Ç –¥–æ—Å—Ç–∏–≥–∞—Ç—å –≤ —Å—Ä–µ–¥–Ω–µ–º "
        "270 –∫–º/—á–∞—Å.",
        "–í —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º –º—è—á–∏–∫–µ –¥–ª—è –≥–æ–ª—å—Ñ–∞ –≤—Å–µ–≥–æ 336 –≤—ã–µ–º–æ–∫.",
        "–í –ø–µ–ª–æ—Ç–æ–Ω–µ –§–æ—Ä–º—É–ª—ã-1 –Ω–µ—Ç –±–æ–ª–∏–¥–∞ –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º 13, –ø–æ—Å–ª–µ 12-–≥–æ —Å—Ä–∞–∑—É –∏–¥—ë—Ç 1",
        "–§–µ—Ä–Ω–∞–Ω–¥–æ –ê–ª–æ–Ω—Å–æ, –≥–æ–Ω—â–∏–∫ ¬´–§–æ—Ä–º—É–ª—ã-1¬ª, —Å–µ–ª –∑–∞ —Ä—É–ª—å –∫–∞—Ä—Ç–∞ –≤ —Ç—Ä–∏ –≥–æ–¥–∞.",
        "–ù–∏–ª—å—Å –ë–æ—Ä, –∑–Ω–∞–º–µ–Ω–∏—Ç—ã–π —Ñ–∏–∑–∏–∫, –±—ã–ª –≤—Ä–∞—Ç–∞—Ä—ë–º —Å–±–æ—Ä–Ω–æ–π –î–∞–Ω–∏–∏.",
    ],
    "–∏—Å—Ç–æ—Ä–∏—è": [
        "–í–µ–ª–∏–∫–∞—è –∫–∏—Ç–∞–π—Å–∫–∞—è —Å—Ç–µ–Ω–∞ –Ω–µ –≤–∏–¥–Ω–∞ —Å –õ—É–Ω—ã –Ω–µ–≤–æ–æ—Ä—É–∂–µ–Ω–Ω—ã–º –≥–ª–∞–∑–æ–º.",
        "–ü–µ—Ä–≤–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –±—ã–ª–∞ —Å–¥–µ–ª–∞–Ω–∞ –≤ 1826 –≥–æ–¥—É.",
        "–†–∏–º –±—ã–ª –æ—Å–Ω–æ–≤–∞–Ω –≤ 753 –≥–æ–¥—É –¥–æ –Ω–∞—à–µ–π —ç—Ä—ã.",
        "–ü–µ—Ç—Ä¬ª.",
        "–ê—Ä–∞–±—Å–∫–∏–µ —Ü–∏—Ñ—Ä—ã –∏–∑–æ–±—Ä–µ–ª–∏—Å—å –Ω–µ –∞—Ä–∞–±–∞–º–∏, –∞ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞–º–∏ –∏–∑ –ò–Ω–¥–∏–∏.",
        "–ö–æ–≥–¥–∞-—Ç–æ –º–æ—Ä—Ñ–∏–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –∫–∞—à–ª—è.",
    ],
    "–∫–æ—Å–º–æ—Å": [
        "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –Ω–∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –í–µ–Ω–µ—Ä—ã –¥–æ—Å—Ç–∏–≥–∞–µ—Ç 465¬∞C, —á—Ç–æ –≥–æ—Ä—è—á–µ–µ, —á–µ–º –Ω–∞ –ú–µ—Ä–∫—É—Ä–∏–∏, —Ö–æ—Ç—è –í–µ–Ω–µ—Ä–∞ –¥–∞–ª—å—à–µ –æ—Ç –°–æ–ª–Ω—Ü–∞.",
        "–°–∞–º–∞—è –≤—ã—Å–æ–∫–∞—è –≥–æ—Ä–∞ –≤ –°–æ–ª–Ω–µ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ - –≥–æ—Ä–∞ –û–ª–∏–º–ø –Ω–∞ –ú–∞—Ä—Å–µ. –ï–µ –≤—ã—Å–æ—Ç–∞ –¥–æ—Å—Ç–∏–≥–∞–µ—Ç 21 –∫–∏–ª–æ–º–µ—Ç—Ä.",
        "–ù–µ–π—Ç—Ä–æ–Ω–Ω—ã–µ –∑–≤–µ–∑–¥—ã –º–æ–≥—É—Ç –≤—Ä–∞—â–∞—Ç—å—Å—è —Å–æ —Å–∫–æ—Ä–æ—Å—Ç—å—é –¥–æ 600 –æ–±–æ—Ä–æ—Ç–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É.",
        "–í –∫–æ—Å–º–æ—Å–µ –Ω–µ–ª—å–∑—è –∑–∞–ø–ª–∞–∫–∞—Ç—å. –í —É—Å–ª–æ–≤–∏—è—Ö –º–∏–∫—Ä–æ–≥—Ä–∞–≤–∏—Ç–∞—Ü–∏–∏ —Å–ª–µ–∑—ã –Ω–µ –ø–∞–¥–∞—é—Ç –≤–Ω–∏–∑, –∫–∞–∫ –Ω–∞ –ó–µ–º–ª–µ, –∞ –æ—Å—Ç–∞—é—Ç—Å—è –Ω–∞ "
        "–≥–ª–∞–∑–∞—Ö –≤ –≤–∏–¥–µ –º–∞–ª–µ–Ω—å–∫–∏—Ö –∫–∞–ø–µ–ª—å.",
        "–í –∫–æ—Å–º–æ—Å–µ –Ω–µ—Ç –∑–≤—É–∫–∞. –ó–≤—É–∫ –Ω–µ –º–æ–∂–µ—Ç —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è—Ç—å—Å—è –≤ –≤–∞–∫—É—É–º–µ, —Ç–∞–∫ –∫–∞–∫ –µ–º—É –Ω—É–∂–Ω—ã –º–æ–ª–µ–∫—É–ª—ã –≤–æ–∑–¥—É—Ö–∞ –∏–ª–∏ "
        "–¥—Ä—É–≥–æ–≥–æ –≤–µ—â–µ—Å—Ç–≤–∞ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤–æ–ª–Ω.",
        "–°–∞—Ç—É—Ä–Ω –º–æ–∂–µ—Ç –ø–ª–∞–≤–∞—Ç—å –≤ –≤–æ–¥–µ. –ï—Å–ª–∏ –±—ã —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª –±–∞—Å—Å–µ–π–Ω —Å –≤–æ–¥–æ–π –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞, –°–∞—Ç—É—Ä–Ω, –∏–∑-–∑–∞ —Å–≤–æ–µ–π "
        "–Ω–∏–∑–∫–æ–π –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏, –ø–ª–∞–≤–∞–ª –±—ã –Ω–∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏.",
    ],
}

API_KEY = "c4aec831b9f8a6d4a4acc553848b76ff"


class ActionGetWeather:
    def __init__(self):
        self.api_key = API_KEY

    def name(self):
        return "action_get_weather"

    def run(self, city):
        try:
            city_encoded = quote(city)
            url = f"http://api.openweathermap.org/data/2.5/weather?q={city_encoded}&appid={self.api_key}&units=metric&lang=ru"
            response = requests.get(url)
            response.raise_for_status()
            data = response.json()

            temp = data["main"]["temp"]
            weather_desc = data["weather"][0]["description"]
            pressure = data["main"]["pressure"]
            sunrise_timestamp = data["sys"]["sunrise"]
            sunset_timestamp = data["sys"]["sunset"]

            sunrise_time = datetime.datetime.fromtimestamp(sunrise_timestamp).strftime("%H:%M:%S")
            sunset_time = datetime.datetime.fromtimestamp(sunset_timestamp).strftime("%H:%M:%S")

            weather_responses = [
                (f"–í –≥–æ—Ä–æ–¥–µ {city} —Å–µ–π—á–∞—Å {weather_desc}, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ {temp}¬∞C, "
                 f"–∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ {pressure} –≥–ü–∞.\n"
                 f"–í—Ä–µ–º—è –≤–æ—Å—Ö–æ–¥–∞: {sunrise_time}, –≤—Ä–µ–º—è –∑–∞–∫–∞—Ç–∞: {sunset_time}"),
                (f"–ü–æ–≥–æ–¥–∞ –≤ {city}: {weather_desc}, {temp}¬∞C, –¥–∞–≤–ª–µ–Ω–∏–µ {pressure} –≥–ü–∞. "
                 f"–í–æ—Å—Ö–æ–¥ –≤ {sunrise_time}, –∑–∞–∫–∞—Ç –≤ {sunset_time}."),
                (f"–°–µ–π—á–∞—Å –≤ {city} {weather_desc}, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞ {temp} –≥—Ä–∞–¥—É—Å–æ–≤ –¶–µ–ª—å—Å–∏—è, "
                 f"–¥–∞–≤–ª–µ–Ω–∏–µ {pressure} –≥–µ–∫—Ç–æ–ø–∞—Å–∫–∞–ª–µ–π. –°–æ–ª–Ω—Ü–µ –≤—Å—Ç–∞–ª–æ –≤ {sunrise_time}, –∞ —Å—è–¥–µ—Ç –≤ {sunset_time}.")
            ]
            return random.choice(weather_responses)
        except requests.exceptions.HTTPError as e:
            if e.response.status_code == 404:
                return "–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞."
            else:
                return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ."
        except Exception as e:
            return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}"


def process_text(text):
    doc = nlp(text)
    return [token.lemma_ for token in doc if not token.is_punct and not token.is_space]


def calculate(expression):
    try:
        expression = expression.replace('x', '*')
        result = eval(expression)
        return str(result)
    except (SyntaxError, TypeError, NameError, ZeroDivisionError):
        return "–ù–µ –º–æ–≥—É –≤—ã—á–∏—Å–ª–∏—Ç—å —ç—Ç–æ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ."


def get_random_fact(category):
    if category in facts:
        return random.choice(facts[category])
    else:
        return "–ù–µ—Ç —Ñ–∞–∫—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."


def search_web(query):
    try:
        url = f"https://www.google.com/search?q={query.replace(' ', '+')}"
        webbrowser.open_new_tab(url)
        return random.choice([f"–û—Ç–∫—Ä—ã–≤–∞—é Google —Å –∑–∞–ø—Ä–æ—Å–æ–º: {query}", f"–ò—â—É '{query}' –≤ Google..."])
    except webbrowser.Error:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –±—Ä–∞—É–∑–µ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –±—Ä–∞—É–∑–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."


def log_dialog(user_input, bot_response):
    with open("chat_log.txt", "a", encoding="utf-8") as log_file:
        log_file.write(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_input}\n")
        log_file.write(f"–ë–æ—Ç: {bot_response}\n")
        log_file.write("-" * 40 + "\n")


def get_weather(city):
    weather_action = ActionGetWeather()
    return weather_action.run(city)


def lemmatize_text(text):
    doc = nlp(text)
    return " ".join([token.lemma_ for token in doc])


def analyze_sentiment(text):
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç –Ω–∞–ø—Ä—è–º—É—é
        russian_sentiment = TextBlob(text).sentiment.polarity

        # –ï—Å–ª–∏ –∞–Ω–∞–ª–∏–∑ –Ω–∞ —Ä—É—Å—Å–∫–æ–º –¥–∞–ª –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–≤–æ–¥
        if -0.3 <= russian_sentiment <= 0.3:
            translator = Translator()
            translated = translator.translate(text, src='ru', dest='en').text
            english_sentiment = TextBlob(translated).sentiment.polarity
            polarity_score = english_sentiment
        else:
            polarity_score = russian_sentiment

        if polarity_score > 0.3:
            return "–¢—ã –∑–≤—É—á–∏—à—å –æ—á–µ–Ω—å –ø–æ–∑–∏—Ç–∏–≤–Ω–æ! üòÑ –ß–µ–º –º–æ–≥—É –ø–æ—Ä–∞–¥–æ–≤–∞—Ç—å —Ç–µ–±—è –µ—â—ë?"
        elif polarity_score < -0.3:
            return "–¢—ã, –ø–æ—Ö–æ–∂–µ, –Ω–µ –≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏... üòî –•–æ—á–µ—à—å –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å –æ–± —ç—Ç–æ–º?"
        else:
            return "–£–ª–∞–≤–ª–∏–≤–∞—é –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –Ω–∞—Å—Ç—Ä–æ–π. –°–ø—Ä–∞—à–∏–≤–∞–π, –µ—Å–ª–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –Ω—É–∂–Ω–æ!"
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è: {e}")
        return "–•–º... —Å–ª–æ–∂–Ω–æ –ø–æ–Ω—è—Ç—å —Ç–≤–æ—ë –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ. –ù–æ —è –∑–¥–µ—Å—å, –µ—Å–ª–∏ —á—Ç–æ üòä"


def chatbot_response(user_input, chosen_category=None):
    user_input_lower = user_input.lower()

    if chosen_category:
        if user_input_lower in facts:
            return get_random_fact(user_input_lower)
        else:
            return "–ù–µ—Ç —Ñ–∞–∫—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å —Ñ–∞–∫—Ç–∞
    if re.search(r"—Ä–∞—Å—Å–∫–∞–∂–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç", user_input_lower):
        return "–û –∫–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å —Ñ–∞–∫—Ç? (—Å–ø–æ—Ä—Ç, –∏—Å—Ç–æ—Ä–∏—è, –∫–æ—Å–º–æ—Å)"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
    match = re.search(r"(\d+(\.\d+)?\s*[\+\-\*/]\s*\d+(\.\d+)?)", user_input_lower)
    if match:
        expression = match.group(1)
        return "–†–µ–∑—É–ª—å—Ç–∞—Ç: " + calculate(expression)

    match = re.search(r"–ø–æ–∏—Å–∫\s+(.+)", user_input_lower, re.IGNORECASE)
    if match:
        return search_web(match.group(1))

    match = re.search(r"–ø–æ–≥–æ–¥–∞ –≤ (.+)", user_input_lower, re.IGNORECASE)
    if match:
        city = match.group(1)
        return get_weather(city)

    for pattern, reply in responses.items():
        if re.search(pattern, user_input_lower):
            if isinstance(reply, list):
                return random.choice(reply)
            elif callable(reply):
                return reply()
            else:
                return reply

    # –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–æ —É—Å–ª–æ–≤–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
    return analyze_sentiment(user_input)


if __name__ == "__main__":
    print("–ü—Ä–∏–≤–µ—Ç! –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –º–Ω–µ —Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã:\n"
          "- –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?\n"
          "- –ß—Ç–æ —Ç—ã —É–º–µ–µ—à—å?\n"
          "- –°–∫–æ–ª—å–∫–æ —Å–µ–π—á–∞—Å –≤—Ä–µ–º—è?\n"
          "- –ö–∞–∫–æ–µ —Å–µ–≥–æ–¥–Ω—è —á–∏—Å–ª–æ?\n"
          "- –ö–∞–∫–∞—è —Å–µ–π—á–∞—Å –ø–æ–≥–æ–¥–∞?\n"
          "- –†–∞—Å—Å–∫–∞–∂–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç\n"
          "- –í—ã—á–∏—Å–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2 + 2)\n"
          "- –ü–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ø–æ–∏—Å–∫ –∫–æ—Ç–∏–∫–∏')\n"
          "- –ü–æ–≥–æ–¥–∞ –≤ [–≥–æ—Ä–æ–¥] (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ü–æ–≥–æ–¥–∞ –≤ –ú–æ—Å–∫–≤–µ')\n"
          "- –í–≤–µ–¥–∏—Ç–µ '–≤—ã—Ö–æ–¥' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞.\n"
          "–ß–µ–º –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω?")

    chosen_category = None

    if not os.path.exists("chat_log.txt"):
        with open("chat_log.txt", "w", encoding="utf-8") as f:
            f.write("–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞\n")

    while True:
        user_input = input("–í—ã: ")
        user_input_lower = user_input.lower()

        if user_input_lower == "–≤—ã—Ö–æ–¥":
            print("–ë–æ—Ç: –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break

        if chosen_category:
            response = chatbot_response(user_input, chosen_category)
            chosen_category = None
        else:
            response = chatbot_response(user_input)
            if response == "–û –∫–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å —Ñ–∞–∫—Ç? (—Å–ø–æ—Ä—Ç, –∏—Å—Ç–æ—Ä–∏—è, –∫–æ—Å–º–æ—Å)":
                chosen_category = True

        print("–ë–æ—Ç:", response)
        log_dialog(user_input, response)